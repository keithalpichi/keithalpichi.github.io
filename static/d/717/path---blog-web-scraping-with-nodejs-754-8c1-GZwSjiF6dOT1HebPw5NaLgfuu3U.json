{"data":{"markdownRemark":{"html":"<h2>What is Web Scraping</h2>\n<p>There is one application every software engineer should build. That application is a web scraper. A web scraper is a service that programmatically requests and parses HTML content served from a remote server. Once you have the HTML content of a website you can parse it for specific data.</p>\n<p>In this article I'm going to show you how to build a web scraper to collect an ecommerce site's product inventory. It will give you a good grasp of the hypertext part of HTTP and how browsers use HTML to construct and parse the web pages you view and manipulate everyday.</p>\n<h2>Dependencies</h2>\n<p>There are few libraries we'll use to help us make web scraping a little easier.</p>\n<h3>Server-Side Language</h3>\n<p>Since we're requesting and parsing HTML programmatically we'll need a server-side language. We'll use NodeJS for this.</p>\n<h3>Requesting HTML</h3>\n<p>We need to request the HTML from the website. Although we could do this natively by using the http or https modules in NodeJS's standard library we're going to use <a href=\"https://github.com/axios/axios\">axios</a> to help us out.</p>\n<h3>Parsing HTML</h3>\n<p>We'll also make the parsing work easier on ourselves by using <a href=\"https://github.com/jsdom/jsdom\">jsdom</a>. jsdom is a \"JavaScript implementation of various web standards, for use with Node.js\". This library allows us to perform common browser API commands to parse the HTML. We could proceed without it but then parsing the HTML would be much more difficult.</p>\n<h2>Workflow</h2>\n<p>We'll first need an understanding of the HTML content of the webpage we'd like to request. Since our goal is to collect product inventory we should know the URL of the product we're interested and some HTML elements that would explain the inventory status of the product. Ecommerce sites share common HTML user interfaces:</p>\n<ul>\n<li>input fields that accept a quantity may explain that an item is in-stock</li>\n<li>missing or disabled quantity input fields may explain that the item is out-of-stock</li>\n<li>heading or paragraph tags may display the inventory status such as it being in-stock or out-of-stock. The text is usually \"In Stock\" or \"Out of Stock\".</li>\n<li>buttons that are not disabled and contain \"Add to Cart\" most likely explain that an item is in-stock</li>\n<li>disabled buttons may explain that the item is out-of-stock</li>\n</ul>\n<p>We can use this information to scrape the HTML and determine whether an item is in stock or not. Let's request some made-up website <code>example.com/product/1</code>.</p>\n<pre><code>const resp = await axios.default.get('example.com/product/1')\n</code></pre>\n<p>Axios returns a response object. The <code>data</code> property of this object will contain the HTML. Let's</p>\n<h2>Considerations</h2>\n<ul>\n<li>log-in state</li>\n<li>IP blocked, use proxies</li>\n</ul>","frontmatter":{"title":"Web Scraping With NodeJS","date":"2020-05-19 08:00","tags":["nodejs"]}}},"pageContext":{}}