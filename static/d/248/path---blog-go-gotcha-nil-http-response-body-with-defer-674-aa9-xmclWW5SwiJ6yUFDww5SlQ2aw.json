{"data":{"markdownRemark":{"html":"<p>When handling HTTP responses it is important to check the errors first before handling the responses. Even if you defer to close the <code class=\"language-text\">io.Closer</code>, in this case a response body, you’ll be surprised what happens when it is nil. Avoiding this crucial step or assuming defer can deflect or handle errors will lead to a nasty panic; ultimately crashing your program. Let’s see an example of this.</p>\n<h2>How To Do It Incorrectly</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc.com/coffee\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handle `err`</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// do something with `res`</span></code></pre></div>\n<p>If this function returns valid responses and nil errors you won’t experience any issues. Cool! That is, until <code class=\"language-text\">res</code> is nil. When it is you’ll get a panic that looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">PANIC<span class=\"token punctuation\">:</span> runtime <span class=\"token builtin\">error</span><span class=\"token punctuation\">:</span> invalid memory address or <span class=\"token boolean\">nil</span> pointer dereference</code></pre></div>\n<p>If you follow the call stack you’ll be lead to the line <code class=\"language-text\">defer res.Body.Close()</code>. This error has occurred from trying to close a nil <code class=\"language-text\">io.Closer</code>. It just won’t work, it’s impossible.</p>\n<h2>How To Do It Correctly</h2>\n<p>By simply checking for an error before doing anything with the response we can conclude what we can and cannot do next.</p>\n<ul>\n<li>if the error is not nil, we have an error and the response is nil. Return now or continue but avoid using the nil response</li>\n<li>if the error is nil, we don’t have an error and the response is not nil. We can freely use the response as we originally intended</li>\n</ul>\n<p>Our code could then look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc.com/coffee\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">defer</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// continue to use `res`</span></code></pre></div>\n<p>As you can see we’ve handled the error first and returned if it was not nil. Otherwise we continued to use the response.</p>\n<h2>Conclusion</h2>\n<ul>\n<li>always check errors immediately after functions that return them</li>\n<li><code class=\"language-text\">defer</code> should only prepend non-nil functions</li>\n<li><code class=\"language-text\">defer</code> does not deflect or handle errors automatically. You can, however, handle them with <code class=\"language-text\">recover</code></li>\n</ul>","frontmatter":{"title":"Go Gotcha: Closing a Nil HTTP Response Body With Defer","date":"2018-05-16T15:00:00.000Z"}}},"pageContext":{}}