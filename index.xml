<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keith Alpichi</title>
    <link>/</link>
    <description>Recent content on Keith Alpichi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 May 2018 08:00:00 -0700</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Gotcha: Closing a Nil HTTP Response Body With Defer</title>
      <link>/go-gotcha-nil-http-response-body-with-defer/</link>
      <pubDate>Wed, 16 May 2018 08:00:00 -0700</pubDate>
      
      <guid>/go-gotcha-nil-http-response-body-with-defer/</guid>
      <description>When handling HTTP responses it is important to check the errors first before handling the responses. Even if you defer to close the io.Closer, in this case a response body, you’ll be surprised what happens when it is nil. Avoiding this crucial step or assuming defer can deflect or handle errors will lead to a nasty panic; ultimately crashing your program. Let’s see an example of this.
How To Do It Incorrectly res, err := http.</description>
    </item>
    
    <item>
      <title>Learn React’s “Render” Prop Pattern By Building A Pop-Up Modal</title>
      <link>/react-render-prop-pattern/</link>
      <pubDate>Sun, 06 May 2018 11:01:07 -0700</pubDate>
      
      <guid>/react-render-prop-pattern/</guid>
      <description>The first time I came across the pattern of the render prop was in v3 of the wonderful React-Router library. That was nearly 2 years ago. I’ve used it here and there but I didn’t realize all the beauty behind it until I recently learned it was being used as an alternative to HOC’s. It was also introduced into React 16. The render prop was clearly a pattern I needed to revisit!</description>
    </item>
    
    <item>
      <title>Success Manifest — Episode 0</title>
      <link>/success-manifest/</link>
      <pubDate>Wed, 09 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/success-manifest/</guid>
      <description>What is a Success Manifest What is success really? What qualities make a successful person? What words contribute to this success? Persistence? Focus? Luck?
I created Success Manifest to document my experiences and advice on success from taking a single word and explaining how it relates to success. Following this article and many others, I will devote an entire episode focused on one word.
Here are some of its key components:</description>
    </item>
    
    <item>
      <title>What is an Express Middleware and How to Create One</title>
      <link>/what-is-express-middleware-and-how-to-create-one/</link>
      <pubDate>Mon, 17 Jul 2017 12:00:00 +0000</pubDate>
      
      <guid>/what-is-express-middleware-and-how-to-create-one/</guid>
      <description>Prerequisites  Basic understanding of the HTTP protocol, Javascript, Node, and Express  What are Middlewares? From the documentation,
 Middlewares are functions that have access to the request object (req), the response object (res), and the next function in the application’s request-response cycle. The next function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.
 To give you a relatable picture, Express middleware&amp;rsquo;s are the workers in a manufacturing line where each individual has a specific and unique responsibility.</description>
    </item>
    
    <item>
      <title>How to setup SASS or LESS with Webpack 2</title>
      <link>/how-to-setup-sass-less-with-webpack-2/</link>
      <pubDate>Thu, 13 Jul 2017 12:00:00 +0000</pubDate>
      
      <guid>/how-to-setup-sass-less-with-webpack-2/</guid>
      <description>Prerequisites  Basic understanding of SASS or LESS and Webpack  LESS time, more SASS That&amp;rsquo;s what you want in your development workflow. Spend less time configuring and setting up and more time showing off your bad-ass styled applications. Here&amp;rsquo;s a straight-forward explanation to configuring a preprocessor like SASS or LESS with Webpack.
 I haven&amp;rsquo;t tested it yet but the new version of Webpack (3) should still work with this setup</description>
    </item>
    
    <item>
      <title>How I went from a Stack Overflow reputation of 100 to 550 in under two months</title>
      <link>/how-to-build-stackoverflow-reputation/</link>
      <pubDate>Sat, 13 May 2017 12:00:00 +0000</pubDate>
      
      <guid>/how-to-build-stackoverflow-reputation/</guid>
      <description>Don&amp;rsquo;t Underestimate Stack overflow First off, this achievement may not be a ground-breaking feat but I was happy my approach to answering questions was increasing my reputation at a pretty fast rate. I&amp;rsquo;ve read articles how some people hacked their way to higher reputation but I am going to show you how I did it&amp;hellip; by giving a genuine helpful response as fast as I could after a question was posted.</description>
    </item>
    
    <item>
      <title></title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Highly skilled in Go, Javascript, React, Redux, and NodeJS Deeply passionate about real-time scalable performance A leader who pursues his work with a growth-mindset, pride, and grit Polyglot programmer enthusiastic about challenging himself Interested in intuitive UI&amp;rsquo;s, Kubernetes, serverless computing, event-driven architectures &amp;amp; real-time distributed systems  Aloha! Hi, my name is Keith Alpichi. I am a software engineer at HealthLytix in San Diego, California. I enjoy building performant and scalable real-time applications from the intuitive user interfaces all the way to the databases on the other side of the wire.</description>
    </item>
    
    <item>
      <title></title>
      <link>/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/</guid>
      <description>Projects On Point On Point is a geolocation-based Q&amp;amp;A where users ask and answer nearby questions in real-time. This full-stack application used React, Redux, Node, Express, WebSockets, and PostgreSQL.
The mission behind On Point was to provide users faster valuable responses to their questions about the environment around them. I found that users often have questions about their surroundings but struggle to find reliable answers fast enough. On Point was created to connect users with questions to users answers around them.</description>
    </item>
    
  </channel>
</rss>